{
  "content": "### Tech Spec: Lattice Coach\n\n### Author: @Waverly Mandel  \n### Tech lead: Waverly  \n### Collaborators: @Caleb Sotelo, @Carrie Noonan  \n\n---\n\n### Historical Context\n\nLattice Coach emerges as a continuation of the AI team’s efforts to explore proactive, data-driven tools to improve employee productivity and satisfaction. The project builds upon the nascent \"Work Summaries\" proof of concept, which aimed to automate the synthesis of individual contributions into actionable summaries. Expanding on this foundation, Lattice Coach integrates internal Lattice data (such as 1:1s, feedback, updates, and reviews) with external sources (e.g., GitHub, Jira, Google Calendar, Slack, and Notion) to provide real-time insights, recommendations, and actions tailored to an employee's role and workflow.\n\nRecognizing that data-driven coaching is only as effective as the integrations supporting it, Lattice Coach is heavily reliant on an ongoing \"Integrations\" workstream. This workstream focuses on building connectors with third-party platforms to aggregate and contextualize data for Lattice applications.\n\nAdditionally, a significant amount of technical debt must be addressed before meaningful progress can be made. This includes standardizing API response structures, refactoring outdated codebases, and addressing performance bottlenecks in the existing infrastructure.\n\n---\n\n### Objective\n\nDevelop Lattice Coach: a proactive in-app assistant designed to reduce administrative burden, enhance productivity, and provide data-driven coaching for individual contributors (ICs). The proof of concept (POC) will demonstrate the agentic capabilities of AI, with a focus on **proactivity**, **reactivity**, and **contextual interactivity**, while aligning with Lattice’s core mission to make work meaningful.\n\n---\n\n### Project Goals\n\n1. **Build a Functional Prototype**:\n   - A standalone application showcasing Lattice Coach’s core functionalities.\n   - Focus on real-time context awareness and agentic reasoning.\n2. **Enable Data-Driven Coaching**:\n   - Aggregate internal and external data to provide actionable insights and proactive recommendations.\n3. **Deliver a Scalable Architecture**:\n   - Establish a modular and extensible foundation to support future integrations and feature enhancements.\n4. **Address Technical Debt**:\n   - Refactor and optimize key components, including synthesis nodes and API integrations, for improved reliability.\n5. **Demonstrate Business Value**:\n   - Highlight how Lattice Coach reduces administrative overhead and improves employee engagement.\n\n---\n\n### Key Questions\n\n- **Employee Experience**: How can Lattice Coach enhance productivity, alignment, and workplace satisfaction?\n- **Data Utilization**: How can internal and external data be leveraged for meaningful recommendations?\n- **Task Automation**: How can repetitive administrative tasks be minimized through AI-driven workflows?\n- **Proactivity vs. Reactivity**: How should the assistant balance unsolicited suggestions with user-initiated interactions?\n\n---\n\n### Technical Architecture\n\n#### **1. Application Structure**\n- **Backend**: Python with FastAPI for scalability.\n- **Frontend**: React.js for a responsive, modular UI.\n- **Data Processing**: LangGraph SDK for agentic workflows and OpenAI API for NLP tasks.\n\n#### **2. Data Sources**\n- **Internal Lattice Data**:\n  - **1:1s**: Action items, priorities, and notes.\n  - **Feedback**: Recognition trends and areas for growth.\n  - **Updates**: Weekly summaries and progress tracking.\n  - **Performance Reviews**: Historical insights into strengths and weaknesses.\n- **External Data**:\n  - **GitHub**: Pull requests, reviews, and contribution patterns.\n  - **Jira**: Task statuses, blockers, and velocity metrics.\n  - **Google Calendar**: Scheduling insights for proactive suggestions.\n  - **Slack**: Communication patterns and task reminders.\n  - **Notion**: Documentation references and task lists.\n\n---\n\n### Core Features\n\n#### **1. Proactive Suggestions**\n- **Weekly Overview**:\n  - Summarize upcoming meetings, tasks, and deadlines.\n  - Highlight potential blockers (e.g., overdue Jira tickets, unreviewed PRs).\n- **Mid-Week Check-In**:\n  - Remind users of outstanding tasks and provide suggestions for prioritization.\n- **End-of-Week Reflection**:\n  - Generate a summary of accomplishments and areas for improvement.\n  - Suggest updates for Lattice performance tools.\n\n#### **2. Actionable Conversations**\n- Automate repetitive tasks via conversational prompts:\n  - *\"Would you like to schedule a 1:1 based on your recurring meetings?\"*\n  - *\"Shall I log this feedback into Lattice?\"*\n- Enable real-time updates to goals or roadmaps based on activity patterns.\n\n#### **3. Cluster Analysis**\n- **GitHub Activity**:\n  - Analyze contributions and align them with personal or team goals.\n  - Provide feedback on coding practices, such as pull request sizes and review frequency.\n- **Jira Metrics**:\n  - Detect task bottlenecks and provide actionable recommendations.\n  - Highlight alignment with team goals and priorities.\n\n#### **4. Goal Alignment**\n- Track alignment between personal objectives and team/company goals.\n- Provide recommendations for adjustment based on real-time activity analysis.\n\n#### **5. Configurable Preferences**\n- Allow users to adjust the assistant’s behavior:\n  - Frequency of suggestions.\n  - Depth of data analysis.\n  - Preferred communication style (e.g., concise vs. detailed).\n\n---\n\n### Agentic Capabilities\n\n1. **Proactivity**:\n   - Anticipate user needs based on role, activity, and goals.\n   - Offer unsolicited but relevant recommendations.\n2. **Reactivity**:\n   - Adapt to real-time data changes and user feedback.\n   - Respond dynamically to multi-step user queries.\n3. **Interactivity**:\n   - Maintain conversational context for complex workflows.\n   - Enable seamless follow-ups and task automation.\n\n---\n\n### Non-Goals\n\n- **Persistence**: The POC will not include long-term memory for users.\n- **Advanced RAG**: Retrieval-Augmented Generation will be deferred.\n- **Evaluation Frameworks**: No formal evaluation metrics or tooling will be included.\n\n---\n\n### Future Considerations\n\n1. **Expanded Integrations**:\n   - **Zoom**: Automate meeting summaries and action items.\n   - **Asana**: Track project timelines and task dependencies.\n2. **Managerial Personas**:\n   - Extend functionality to team leads for performance and task monitoring.\n3. **Advanced Agentic Reasoning**:\n   - Enable multi-step workflows, such as role-based coaching aligned with competency matrices.\n\n---\n\n### Expected Outcomes\n\n- A functional prototype showcasing the agent’s proactive, reactive, and interactive capabilities.\n- A roadmap for addressing technical debt to support future expansions.\n- A clear demonstration of the potential for AI-enhanced productivity tools.\n\n---"
}
